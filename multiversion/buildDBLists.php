<?php

require_once 'multiversion/MWConfigCacheGenerator.php';
require_once 'multiversion/MWWikiversions.php';

require_once __DIR__ . '../../vendor/autoload.php';
require_once __DIR__ . "../../src/defines.php";

$dblistsDir = __DIR__ . '/../wmf-config';

global $wmfRealm, $wmfDatacenter;
$wmfRealm = 'production';
$wmfDatacenter = 'eqiad';

require_once __DIR__ . '/../wmf-config/InitialiseSettings.php';
$config = wmfGetVariantSettings();

$created = [];

foreach ( [ 'production', 'labs' ] as $realm ) {
	$wikiversionsFile = ( $realm === 'labs' ) ? 'wikiversions-labs.json' : 'wikiversions.json';
	$wikiversions = MWWikiversions::readWikiVersionsFile( $wikiversionsFile );

	$fullConfig[$realm] = [];
	$knownDBLists[$realm] = [];

	foreach ( $wikiversions as $wgDBname => $wmgVersionNumber ) {
		$fullConfig[$wgDBname] = Wikimedia\MWConfig\MWConfigCacheGenerator::getCachableMWConfig(
			$wgDBname, $config, $realm
		);

		$localTags = $fullConfig[$wgDBname]['wikiTag'] ?? [];

		if ( $localTags ) {
			foreach ( $localTags as $tag ) {
				$knownDBLists[$realm][$tag][] = $wgDBname;
			}
		}
	}

	// HACK: Only write the Beta Cluster-only dblists with the Labs-specific details.
	if ( $realm === 'labs' ) {
		$knownDBLists[$realm] = array_filter(
			$knownDBLists[$realm],
			function ( $key ) {
				// HACK: We shouldn't have to hard-code the lists that affect the Beta Cluster like this.
				return in_array( $key, [ 'all-labs', 'flow_only_labs', 'flow-labs' ] );
			},
			ARRAY_FILTER_USE_KEY
		);
	}

	foreach ( $knownDBLists[$realm] as $DBList => $contents ) {
		writeDBList( $DBList, $contents );
		$created[$DBList] = true;
	}
}

$untracked = [
	// Naturally contains wikis we don't know about
	'deleted',
	// Computed lists
	'open',
	'echo',
	'group1',
	'group2',
];

// Don't linger dblists that are no longer backed by the YAML source
foreach ( glob( __DIR__ . '/../dblists/*.dblist' ) as $filepath ) {
	$dblist = basename( $filepath, '.dblist' );
	if ( !isset( $created[ $dblist ] ) && !in_array( $dblist, $untracked ) ) {
		unlink( $filepath );
	}
}

/**
 * @param string $listname The name of the db list to write.
 * @param string[] $listcontent The wikidbs for the dblist contents.
 */
function writeDBList( $listname, $listcontent ) {
	$path = __DIR__ . '/../dblists/' . $listname . '.dblist';

	// Alpha-sort the contents of the list by array value for consitency
	asort( $listcontent );

	if ( !file_put_contents(
		$path,
		[
			// Header warning about being a generated file
			"# NOTE: This file is automatically generated. Do not try to edit it directly.\n",
			// The contents of the list, written one per line, unique'd
			implode( "\n", array_unique( $listcontent ) ),
			// Trailing new line for consistency
			"\n"
		],
		LOCK_EX )
	) {
		print "Unable to write to $path.\n";
		exit( 1 );
	}
}
